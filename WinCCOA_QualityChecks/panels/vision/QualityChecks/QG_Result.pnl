V 14
2
LANG:10000 0 
LANG:10001 0 
PANEL,-1 -1 1201 714 N "_3DFace" 1
"$fileName"
"dyn_string columns;

main()
{
  //create columns
  string jsonString;

  fileToString($fileName, jsonString);
  
  mapping map = jsonDecode(jsonString);
  
  //add columns
  if ( mappingHasKey(map, \"fields\") )
  { 
    dyn_string fields = map[\"fields\"];
    
    TREE.addColumn(\"Source Tree\");
    
    for (int i = 1; i <= dynlen(fields); i++)
    {
      if ( fields[i] == \"descr\" || fields[i] == \"totalPoints\" )
      {
        continue;
      }      
      
      TREE.addColumn(fields[i]);
      dynAppend(columns, fields[i]);
    }
  }
    
  if ( mappingHasKey(map[\"root\"], \"children\") )
  { 
    createTree(map[\"root\"][\"children\"]);
  }
}

void createTree(dyn_mapping dyn_map, string parentId = \"\")
{
  
  for ( int i = 1; i <= dynlen(dyn_map); i++ )
  {
    mapping map = dyn_map[i];
    
    if ( mappingHasKey(map, \"text\") )
    { 
      string text = map[\"text\"];
      //add nodes
      TREE.appendItemNC(parentId, text, text);
    
      //set information for each available column
      for ( int j = 1; j <= dynlen(columns); j++ )
      {
        if ( mappingHasKey(map, columns[j]) )
        { 
          TREE.setText(text, j, map[columns[j]]);
        }
      }
      
      //expand nodes that have errors & color them red
      if ( mappingHasKey(map, \"expanded\") )
      { 
        TREE.setOpen(text, map[\"expanded\"]);
        
        if ( mappingHasKey(map, \"leaf\") && map[\"leaf\"])
        {
          if (TREE.getText(text,1) != TREE.getText(text,2))
            for ( int j = 0; j <= dynlen(columns); j++ )
            {
                TREE.setBackColor(text, j, \"{153,0,0,80}\");
            }
        }
      }
      
      //do it recursive for each children
      if ( mappingHasKey(map, \"children\") )
      { 
        createTree(map[\"children\"], text);
      }  
    }
  }
}
" 0
 E E E E 1 -1 -1 0  50 40
""0  1
E E 3
"CBRef" "1"
"EClose" E
"dpi" "96"
1 0 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
2
LANG:10000 0 
LANG:10001 0 
29 0
"TREE"
""
1 12.63972286374134 11.58617332035053 E E E 1 E 1 E N "DavyGrey" E N "SiemensSnow" E E
 E E
0 0 0 0 0 0
E E E
0
2
LANG:10000 0 
LANG:10001 0 

3
"alternatingRowColors" "bool TRUE"
"sizePolicy" "Expanding Expanding"
"layoutAlignment" "AlignNone"
2
LANG:10000 26 Arial,-1,12,5,50,0,0,0,0,0
LANG:10001 26 Arial,-1,12,5,50,0,0,0,0,0
0  9 9 1191 673
10 TreeWidget
0
E13 1
"PUSH_BUTTON1"
""
1 1097 684.8 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
1 0 0 0 0 0
E E E
0
2
LANG:10000 0 
LANG:10001 0 

2
"minimumSize" "95 25"
"layoutAlignment" "AlignNone"
2
LANG:10000 26 Arial,-1,12,5,50,0,0,0,0,0
LANG:10001 26 Arial,-1,12,5,50,0,0,0,0,0
0  1095 678 1193 706

T 
2
LANG:10000 10 SchlieÃŸen
LANG:10001 5 Close
"main(mapping event)
{
  PanelOff();
}" 0
 E E E
32 2
"SPACER1"
""
1 9 680 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 E E
2 0 0 0 0 0
E E E
0
2
LANG:10000 0 
LANG:10001 0 

3
"transparentForMouse" ""
"sizePolicy" "Expanding Ignored"
"layoutAlignment" "AlignNone"
 9 680 988.9999999999999 704 1
13 3
"PUSH_BUTTON2"
""
1 996 684.8 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
3 0 0 0 0 0
E E E
0
2
LANG:10000 0 
LANG:10001 0 

2
"minimumSize" "95 25"
"layoutAlignment" "AlignNone"
2
LANG:10000 26 Arial,-1,12,5,50,0,0,0,0,0
LANG:10001 26 Arial,-1,12,5,50,0,0,0,0,0
0  994 678 1092 706

T 
2
LANG:10000 7 Grenzen
LANG:10001 6 Limits
"main(mapping event)
{
  ChildPanelOnCentralModal(\"WinCCOA_QualityChecks/general/Settings.pnl\", \"Settings\", makeDynString(\"\"));
}" 0
 E E E
0
LAYER, 1 
2
LANG:10000 0 
LANG:10001 0 
0
LAYER, 2 
2
LANG:10000 0 
LANG:10001 0 
0
LAYER, 3 
2
LANG:10000 0 
LANG:10001 0 
0
LAYER, 4 
2
LANG:10000 0 
LANG:10001 0 
0
LAYER, 5 
2
LANG:10000 0 
LANG:10001 0 
0
LAYER, 6 
2
LANG:10000 0 
LANG:10001 0 
0
LAYER, 7 
2
LANG:10000 0 
LANG:10001 0 
0
4 0 "LAYOUT_GROUP0" 1
3 0 
1 2 3 

"S 1" "2 0 1 1"
"S 2" "0 0 1 1"
"S 3" "1 0 1 1"
"" ""
0 1 0 0
4 1 "LAYOUT_GROUP1" -1
1 1 
0 
0 
"S 0" "0 0 1 1"
"G 0" "1 0 1 1"
"" ""
0 2 0 0
0
